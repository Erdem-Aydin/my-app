// app/(tabs)/completed-students.tsx
import { useEffect, useState, useCallback } from 'react'; // useCallback eklendi
import { View, FlatList } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Appbar, Card, Checkbox, Text, Button, Surface } from 'react-native-paper';
import { useRouter, useFocusEffect } from 'expo-router'; // useFocusEffect eklendi
import { STORAGE_KEY } from '@/constants/storage';
import { calculateRemainingClasses, getDayIndex, getLessonPrices } from '@/utils/student-utils';
import { Student } from '@/types/student';

export default function CompletedStudentsPage() {
  const [students, setStudents] = useState<Student[]>([]);
  const [selectedIds, setSelectedIds] = useState<string[]>([]);
  const [prices, setPrices] = useState({ bireysel: 1000, grup: 600 });
  const [isReady, setIsReady] = useState(false);
  const router = useRouter();

  const loadStudents = async () => {
    const json = await AsyncStorage.getItem(STORAGE_KEY);
    const parsed: Student[] = json ? JSON.parse(json) : [];
    setStudents(parsed);
  };

  const loadPrices = async () => {
    const stored = await getLessonPrices();
    setPrices(stored);
  };

  // Sadece bu kÄ±smÄ± deÄŸiÅŸtiriyoruz: useEffect yerine useFocusEffect kullanÄ±lÄ±yor
  useFocusEffect(
    // useCallback kullanarak, bu fonksiyonun sadece baÄŸÄ±mlÄ±lÄ±klarÄ± deÄŸiÅŸtiÄŸinde yeniden oluÅŸturulmasÄ±nÄ± saÄŸlÄ±yoruz.
    // BaÄŸÄ±mlÄ±lÄ±k dizisi boÅŸ olduÄŸu iÃ§in, sayfa her odaklandÄ±ÄŸÄ±nda Ã§alÄ±ÅŸacak.
    useCallback(() => {
      console.log('CompletedStudentsPage odaklandÄ±, veriler yenileniyor...'); // Konsola bilgi ekleyelim
      loadStudents(); // Ã–ÄŸrencileri yeniden yÃ¼kle
      loadPrices();   // FiyatlarÄ± yeniden yÃ¼kle
      setSelectedIds([]); // Sayfa her odaklandÄ±ÄŸÄ±nda seÃ§ili Ã¶ÄŸrencileri temizle
      setIsReady(true); // Verilerin yÃ¼klendiÄŸini iÅŸaretle
      
      // Temizleme fonksiyonu: Sayfa odak dÄ±ÅŸÄ±na Ã§Ä±ktÄ±ÄŸÄ±nda yapÄ±lacaklar
      return () => {
        console.log('CompletedStudentsPage odak dÄ±ÅŸÄ±na Ã§Ä±ktÄ±.');
        // Ã–rneÄŸin, eÄŸer bu sayfada Ã¶zel abonelikler veya zamanlayÄ±cÄ±lar olsaydÄ±,
        // onlarÄ± burada temizlerdik. Bu durumda sadece selectedIds'Ä± temizliyoruz.
      };
    }, []) // BoÅŸ baÄŸÄ±mlÄ±lÄ±k dizisi sayesinde, sayfa her odaklandÄ±ÄŸÄ±nda bu efekt Ã§alÄ±ÅŸÄ±r.
  );

  const completedStudents = students.filter(s => calculateRemainingClasses(s) <= 0);

  const toggleSelect = (id: string) => {
    setSelectedIds(prev =>
      prev.includes(id) ? prev.filter(i => i !== id) : [...prev, id]
    );
  };

  // Bu fonksiyonun iÃ§eriÄŸine DOKUNMUYORUZ.
  const handlePayment = async () => {
    const updated = students.map(s => {
      if (!selectedIds.includes(s.id)) return s;

      const now = new Date();
      now.setHours(0, 0, 0, 0);

      const lessonDayIndex = getDayIndex(s.Day);
      const remaining = calculateRemainingClasses(s);

      let newPaidDate = new Date(now);
      let count = Math.abs(remaining);

      if (now.getDay() === lessonDayIndex) {
        count--;
      }

      while (count >= 0) {
        newPaidDate.setDate(newPaidDate.getDate() - 1);
        if (newPaidDate.getDay() === lessonDayIndex) {
          count--;
        }
      }

      return {
        ...s,
        LastPaidDate: newPaidDate.toISOString(),
        FreeAbsanceUsed: false,
        TeacherCanceledClassNum: 0,
        ExtraClassNum: 0,
      };
    });

    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(updated));
    setSelectedIds([]);
    // handlePayment bittikten sonra veriyi manuel olarak tekrar yÃ¼klemiyoruz,
    // Ã§Ã¼nkÃ¼ sayfa yeniden odaklandÄ±ÄŸÄ±nda (Ã¶rneÄŸin pop-up kapandÄ±ÄŸÄ±nda veya tab deÄŸiÅŸtiÄŸinde)
    // useFocusEffect zaten otomatik olarak loadStudents'Ä± Ã§aÄŸÄ±racak.
    // Ancak, iÅŸlemin hemen ardÄ±ndan UI'nin gÃ¼ncellenmesi iÃ§in burada bir Ã§aÄŸrÄ±ya ihtiyacÄ±mÄ±z var.
    // Bu yÃ¼zden bu satÄ±rÄ± geri getiriyorum ki Ã¶deme alÄ±nca liste anÄ±nda gÃ¼ncellensin.
    await loadStudents();
  };

  const getFee = (student: Student) =>
    prices[student.Type as 'bireysel' | 'grup'] || 0;

  const totalFeeAll = completedStudents.reduce((sum, s) => sum + getFee(s), 0);
  const totalFeeSelected = completedStudents
    .filter(s => selectedIds.includes(s.id))
    .reduce((sum, s) => sum + getFee(s), 0);

  // Bu satÄ±rÄ± Ã¶nceki Ã§alÄ±ÅŸan haline getiriyorum.
  const allSelected = selectedIds.length === completedStudents.length && completedStudents.length > 0;


  const toggleSelectAll = () => {
    if (allSelected) {
      setSelectedIds([]);
    } else {
      setSelectedIds(completedStudents.map(s => s.id));
    }
  };

  return (
    <View style={{ flex: 1 }}>
      <Appbar.Header>
        <Appbar.Content title="Tamamlanan Dersler" />
        <Appbar.Action
          icon="cog"
          onPress={() => router.push('/setting-prices')}
        />
      </Appbar.Header>

      {isReady && (
        <>
          <View style={{ padding: 16 }}>
            <Surface style={{ margin: 16, padding: 16, borderRadius: 8, elevation: 2 }}>
              <Text variant="titleMedium" style={{ fontWeight: 'bold' }}>
                Toplam alÄ±nacak Ã¼cret: {totalFeeAll} TL
              </Text>
              <Text variant="titleMedium" style={{ fontWeight: 'bold', marginTop: 4 }}>
                Toplam Ã¶ÄŸrenci sayÄ±sÄ±: {completedStudents.length}
              </Text>
              <Text variant="titleMedium" style={{ fontWeight: 'bold', marginTop: 4 }}>
                SeÃ§ili Ã¶ÄŸrencilerden alÄ±nacak: {totalFeeSelected} TL
              </Text>
            </Surface>

            <Button
              onPress={toggleSelectAll}
              style={{ marginTop: 10 }}
              mode="outlined"
            >
              {allSelected ? 'TÃ¼m SeÃ§imleri KaldÄ±r' : 'TÃ¼mÃ¼nÃ¼ SeÃ§'}
            </Button>
          </View>

          <FlatList
            data={completedStudents.sort((a, b) =>
              a.StudentName.localeCompare(b.StudentName)
            )}
            keyExtractor={item => item.id}
            renderItem={({ item }) => (
              <Card style={{ margin: 10 }}>
                <Card.Title
                  title={item.StudentName}
                  subtitle={`Tip: ${item.Type} â€¢ GÃ¼n: ${item.Day} â€¢ Kalan: ${calculateRemainingClasses(item)}`}
                  right={() => (
                    <Checkbox
                      status={selectedIds.includes(item.id) ? 'checked' : 'unchecked'}
                      onPress={() => toggleSelect(item.id)}
                    />
                  )}
                />
              </Card>
            )}
            ListEmptyComponent={() => (
              <View style={{ 
                flex: 1, 
                justifyContent: 'center', // Dikeyde ortala
                alignItems: 'center',   // Yatayda ortala
                marginTop: 50,          // YukarÄ±dan biraz boÅŸluk bÄ±rak
                paddingHorizontal: 20,  // Yatayda iÃ§eriÄŸe boÅŸluk ekle
              }}>
                <Text variant="titleMedium" style={{ 
                    textAlign: 'center', // YazÄ±yÄ± ortala
                    color: '#6c757d'     // Hafif gri renk, daha yumuÅŸak bir gÃ¶rÃ¼nÃ¼m iÃ§in
                }}>
                  Åžu an iÃ§in tamamlanmÄ±ÅŸ dersi olan Ã¶ÄŸrenci bulunmamaktadÄ±r. ðŸŽ‰
                </Text>
                <Text variant="bodyMedium" style={{ 
                    textAlign: 'center', 
                    color: '#8d9297', 
                    marginTop: 10 
                }}>
                  Yeni Ã¶demeler yapÄ±ldÄ±ÄŸÄ±nda burada gÃ¶rÃ¼necekler.
                </Text>
              </View>
            )}
          />


          <Button
            mode="contained"
            onPress={handlePayment}
            disabled={selectedIds.length === 0}
            style={{ margin: 16 }}
          >
            Ã–deme AlÄ±ndÄ± ({selectedIds.length})
          </Button>
        </>
      )}
    </View>
  );
}